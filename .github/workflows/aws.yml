# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: ecs-training-container-stage-Cluster-NbCrZxfVhIdl
  FRONTEND_ECR_REPOSITORY: ecs-training-container/myservice
  BACKEND_ECR_REPOSITORY: ecs-training-container/service-backend
  FRONTEND_SERVICE: ecs-training-container-stage-myservice-Service-8vzB4vjoGhqa
  BACKEND_SERVICE: ecs-training-container-stage-service-backend-Service-me1TcDQFJMda
  FRONTEND_TASK_DEFINITION: myapp/frontend/task-definition-frontend.json
  BACKEND_TASK_DEFINITION: myapp/backend/task-definition-backend.json
  FRONTEND_CONTAINER_NAME: myservice
  BACKEND_CONTAINER_NAME: service-backend

permissions:
  contents: read

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # 以下のAWSの設定とECRへのログインステップは共通
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # フロントエンドのビルドとプッシュ
    - name: Build and Push Frontend Image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }} ./myapp/frontend
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
        echo "frontend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Render Frontend Task Definition
      id: frontend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.FRONTEND_TASK_DEFINITION }}
        container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
        image: ${{ env.frontend_image }}

    - name: Deploy Frontend Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
        service: ${{ env.FRONTEND_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-frontend # フロントエンドのデプロイ後に実行
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # AWSの設定とECRへのログインは既に完了しているため省略

    # バックエンドのビルドとプッシュ
    - name: Build and Push Backend Image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }} ./myapp/backend
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
        echo "backend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Render Backend Task Definition
      id: backend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.BACKEND_TASK_DEFINITION }}
        container-name: ${{ env.BACKEND_CONTAINER_NAME }}
        image: ${{ env.backend_image }}

    - name: Deploy Backend Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
        service: ${{ env.BACKEND_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
